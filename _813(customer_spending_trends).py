# -*- coding: utf-8 -*-
""".813(Customer Spending Trends)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-OExJLP-KHlWPI2ZzEHFrLtR0AWN71RV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
  for filename in filenames:
    print(os.path.join(dirname, filename))

df = pd.read_csv('/content/shopping_trends.csv')
df.sample(5)

df.shape

df.info()

df.isna().sum()

df["Customer ID"].duplicated().sum()

df.drop(["Customer ID"], axis=1, inplace=True)

df.describe()

df.sample()

df.columns

df["Age"].describe()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.histplot(df, x="Age", kde=True, ax=axes[0])
sns.boxplot(data=df, x="Age")

gender_counts = df["Gender"].value_counts()
gender_counts

df['Gender'].value_counts(normalize=True)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Gender", ax=axes[0], palette="viridis")
axes[0].set_title('Gender Count')
axes[0].set_xlabel('Gender')
axes[0].set_ylabel('Count')

axes[1].pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', colors=['skyblue', 'orange'], startangle=90)
axes[1].set_title('Gender Distribution')

items_purchased_counts = df["Item Purchased"].value_counts()
items_purchased_counts

df["Item Purchased"].value_counts(normalize=True).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))
sns.countplot(data=df, x="Item Purchased", ax=axes[0], palette="viridis")
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)
axes[1].pie(items_purchased_counts, labels=items_purchased_counts.index)
plt.show()

category_count = df["Category"].value_counts()
category_count

df["Category"].value_counts(normalize=True)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Category", ax=axes[0], palette="viridis")
axes[1].pie(category_count, labels=category_count.index, autopct="%0.1f%%")

plt.show()

df["Purchase Amount (USD)"].describe()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.histplot(data=df, x="Purchase Amount (USD)", kde=True, ax=axes[0])
sns.boxplot(data=df, x="Purchase Amount (USD)", ax=axes[1])

location_counts = df["Location"].value_counts()
location_counts

df["Location"].value_counts(normalize=True).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))
sns.countplot(data=df, x="Location", ax=axes[0])
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)
axes[1].pie(location_counts, labels=location_counts.index)
plt.show()

size_counts = df["Size"].value_counts()
size_counts

df["Size"].value_counts(normalize=True).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Size", ax=axes[0], palette='viridis')
axes[1].pie(size_counts, label=size_counts.index, autopct="%.1f%%", startangle=90)
plt.show()

df.sample()

color_counts = df["Color"].value_counts()
color_counts

df["Color"].value_counts(normalize=True).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Color", ax=axes[0])
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)
axes[1].pie(color_counts, labels=color_counts.index, startangle=90)
plt.show()

df.sample()

season_counts = df["Season"].value_counts()
season_counts

df["Season"].value_counts(normalize=1).reset_index()

# Make sure to execute this cell first to define 'season_counts'
season_counts = df["Season"].value_counts()
season_counts

# ... (other cells) ...

# Now you can use 'season_counts' in this cell
fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Season", ax=axes[0], palette='viridis')
axes[1].pie(season_counts, labels=season_counts.index, autopct="%1.2f%%", startangle=90)
plt.show()

df.sample()

df["Review Rating"].describe()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.histplot(data=df, x="Review Rating", ax=axes[0], kde=True)
sns.boxplot(data=df, x="Review Rating", ax=axes[1])

df.sample()

subscription_status_counts = df["Subscription Status"].value_counts()
subscription_status_counts

df["Subscription Status"].value_counts(normalize=1)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Subscription Status", ax=axes[0], palette="viridis")
axes[1].pie(subscription_status_counts, labels=subscription_status_counts.index, autopct="%1.1f%%", startangle=90) # Changed 'subscription_status_count' to 'subscription_status_counts'

plt.show()

payment_method_count = df["Payment Method"].value_counts()
payment_method_count

df["Payment Method"].value_counts(normalize=True)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Payment Method", ax=axes[0], palette="viridis")
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)
axes[1].pie(payment_method_count, labels=payment_method_count.index, autopct="%0.2f%%", startangle=90)
plt.show()

shipping_type_counts =df["Shipping Type"].value_counts()
shipping_type_counts

df["Shipping Type"].value_counts(normalize=1)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Shipping Type", ax=axes[0], palette="viridis")
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=45)

# Changed 'shipping_type_count' to 'shipping_type_counts'
axes[1].pie(shipping_type_counts, labels=shipping_type_counts.index, autopct="%0.1f%%", startangle=90)

plt.show()

discount_applied_count = df["Discount Applied"].value_counts()
discount_applied_count

df["Discount Applied"].value_counts(normalize=1)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Discount Applied", ax=axes[0], palette="viridis")
axes[1].pie(discount_applied_count, labels=discount_applied_count.index, autopct="%0.2f%%", startangle=90)

plt.show()

promo_code_used_counts = df["Promo Code Used"].value_counts()
promo_code_used_counts

df["Promo Code Used"].value_counts(normalize=1)

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Promo Code Used", ax=axes[0], palette="viridis")
axes[1].pie(promo_code_used_counts, labels=promo_code_used_counts.index, autopct="%0.2f%%", startangle=90)

df.sample()

df["Previous Purchases"].describe()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.histplot(data=df, x="Previous Purchases", ax=axes[0], kde=1)
sns.boxplot(data=df, x="Previous Purchases", ax=axes[1])

df.sample()

preferred_payment_method_count = df["Preferred Payment Method"].value_counts()
preferred_payment_method_count

df["Preferred Payment Method"].value_counts(normalize=True).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Preferred Payment Method", ax=axes[0], palette="viridis")
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)

axes[1].pie(preferred_payment_method_count, labels=preferred_payment_method_count.index, autopct="%0.2f%%")

plt.show()

df.sample()

frequency_of_purchases_count = df["Frequency of Purchases"].value_counts()
frequency_of_purchases_count

df["Frequency of Purchases"].value_counts(normalize=1).reset_index()

fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.countplot(data=df, x="Frequency of Purchases", ax=axes[0], palette="viridis")
axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=90)

axes[1].pie(frequency_of_purchases_count, labels=frequency_of_purchases_count.index, autopct="%0.2f%%")

plt.show()

df.sample()

df.groupby(["Gender"])["Age"].describe()

sns.boxplot(data=df, x="Gender", y="Age")

sns.violinplot(data=df, x="Gender", y="Age")

gender_age_means = df.groupby(["Gender"])["Age"].mean().reset_index()
sns.barplot(data=df, x="Gender", y="Age")

sns.stripplot(data=df, x="Gender", y="Age", jitter=True)

from scipy.stats import shapiro, f_oneway, levene, kruskal

groups = [df[df["Gender"] == cat] ["Age"] for cat in df ["Gender"].unique()]

normality_assumption = False
for group in groups:
  stat, pval = shapiro(group)
  if pval > 0.05:
    normality_assumption = True

homogeneity_of_variance =False
stat, pval = levene(*groups)
if pval > 0.05:
  homogeneity_of_variance_assumption = True


if normality_assumption and homogeneity_of_variance_assumption:
  f_stat, pval = f_oneway(*groups)
  print(f"F-statistic: {f_stat}, P-value: {pval}")
else:
  stat, pval = kruskal(*groups)
  print(f"Kruskal-Wallis Statistic: {stat}, P-value: {pval}")

g = sns.FacetGrid(df, col='Gender')
g.map(plt.hist, 'Age', bins=10, alpha=0.7)
plt.show()